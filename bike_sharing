{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/zekaemo/BikeSharing_DataAnalytic/blob/main/Zeka_Emo_Proyek_Analisis_Data.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "H9wADwK78DCz"
      },
      "source": [
        "# Proyek Analisis Data: Bike Sharing Dataset\n",
        "- **Nama:** Zeka Emo\n",
        "- **Email:** zeka.emo30@gmail.com\n",
        "- **ID Dicoding:** zekaemo"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "eE0raob58DC0"
      },
      "source": [
        "## Menentukan Pertanyaan Bisnis"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GmQeQ5YF8DC0"
      },
      "source": [
        "*   Bagaimana cuaca mempengaruhi jumlah peminjaman sepeda?\n",
        "*   Pada hari liburan, apakah ada kebiasaan yang berbeda dari kategori peminjam jika dibandingkan dengan hari biasa?\n",
        "*   Pada sehari, pada pukul berapa sepeda paling banyak dipinjam?\n",
        "*   Dalam seminggu, hari apa sepeda paling banyak dipinjam?\n",
        "*   Bagaimana jumlah sepeda yang di pinjam ketika udara sedang sangat panas atau sangat dingin?\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "H-z4QGlO8DC1"
      },
      "source": [
        "## Import Semua Packages/Library yang Digunakan"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 39,
      "metadata": {
        "id": "FVYwaObI8DC1"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "h_Sh51Xy8DC1"
      },
      "source": [
        "## Data Wrangling"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "sXU2GBYu8DC1"
      },
      "source": [
        "### Gathering Data"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 40,
      "metadata": {
        "id": "zjCBk1BI8DC1"
      },
      "outputs": [],
      "source": [
        "day_df = pd.read_csv('day.csv')\n",
        "hour_df= pd.read_csv('hour.csv')\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "day_df.head()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 313
        },
        "id": "bRsYEAYcK6X8",
        "outputId": "6f2cb90c-7f32-4619-ab1a-57c5764db13f"
      },
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   instant      dteday  season  yr  mnth  holiday  weekday  workingday  \\\n",
              "0        1  2011-01-01       1   0     1        0        6           0   \n",
              "1        2  2011-01-02       1   0     1        0        0           0   \n",
              "2        3  2011-01-03       1   0     1        0        1           1   \n",
              "3        4  2011-01-04       1   0     1        0        2           1   \n",
              "4        5  2011-01-05       1   0     1        0        3           1   \n",
              "\n",
              "   weathersit      temp     atemp       hum  windspeed  casual  registered  \\\n",
              "0           2  0.344167  0.363625  0.805833   0.160446     331         654   \n",
              "1           2  0.363478  0.353739  0.696087   0.248539     131         670   \n",
              "2           1  0.196364  0.189405  0.437273   0.248309     120        1229   \n",
              "3           1  0.200000  0.212122  0.590435   0.160296     108        1454   \n",
              "4           1  0.226957  0.229270  0.436957   0.186900      82        1518   \n",
              "\n",
              "    cnt  \n",
              "0   985  \n",
              "1   801  \n",
              "2  1349  \n",
              "3  1562  \n",
              "4  1600  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-fc34b427-c3ac-449f-a0fe-93a084aa8290\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>instant</th>\n",
              "      <th>dteday</th>\n",
              "      <th>season</th>\n",
              "      <th>yr</th>\n",
              "      <th>mnth</th>\n",
              "      <th>holiday</th>\n",
              "      <th>weekday</th>\n",
              "      <th>workingday</th>\n",
              "      <th>weathersit</th>\n",
              "      <th>temp</th>\n",
              "      <th>atemp</th>\n",
              "      <th>hum</th>\n",
              "      <th>windspeed</th>\n",
              "      <th>casual</th>\n",
              "      <th>registered</th>\n",
              "      <th>cnt</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>2011-01-01</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>0.344167</td>\n",
              "      <td>0.363625</td>\n",
              "      <td>0.805833</td>\n",
              "      <td>0.160446</td>\n",
              "      <td>331</td>\n",
              "      <td>654</td>\n",
              "      <td>985</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>2011-01-02</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>0.363478</td>\n",
              "      <td>0.353739</td>\n",
              "      <td>0.696087</td>\n",
              "      <td>0.248539</td>\n",
              "      <td>131</td>\n",
              "      <td>670</td>\n",
              "      <td>801</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>2011-01-03</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0.196364</td>\n",
              "      <td>0.189405</td>\n",
              "      <td>0.437273</td>\n",
              "      <td>0.248309</td>\n",
              "      <td>120</td>\n",
              "      <td>1229</td>\n",
              "      <td>1349</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>2011-01-04</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0.200000</td>\n",
              "      <td>0.212122</td>\n",
              "      <td>0.590435</td>\n",
              "      <td>0.160296</td>\n",
              "      <td>108</td>\n",
              "      <td>1454</td>\n",
              "      <td>1562</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>2011-01-05</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0.226957</td>\n",
              "      <td>0.229270</td>\n",
              "      <td>0.436957</td>\n",
              "      <td>0.186900</td>\n",
              "      <td>82</td>\n",
              "      <td>1518</td>\n",
              "      <td>1600</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fc34b427-c3ac-449f-a0fe-93a084aa8290')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-fc34b427-c3ac-449f-a0fe-93a084aa8290 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-fc34b427-c3ac-449f-a0fe-93a084aa8290');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-e3ea9d54-c166-4025-be4d-88e3138acd74\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e3ea9d54-c166-4025-be4d-88e3138acd74')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-e3ea9d54-c166-4025-be4d-88e3138acd74 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "day_df",
              "summary": "{\n  \"name\": \"day_df\",\n  \"rows\": 731,\n  \"fields\": [\n    {\n      \"column\": \"instant\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 211,\n        \"min\": 1,\n        \"max\": 731,\n        \"num_unique_values\": 731,\n        \"samples\": [\n          704,\n          34,\n          301\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"dteday\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 731,\n        \"samples\": [\n          \"2012-12-04\",\n          \"2011-02-03\",\n          \"2011-10-28\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"season\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 4,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2,\n          4,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"yr\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mnth\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 1,\n        \"max\": 12,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          11,\n          10\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"holiday\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"weekday\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 0,\n        \"max\": 6,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          6,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"workingday\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"weathersit\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 3,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          2,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"temp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.18305099611148867,\n        \"min\": 0.0591304,\n        \"max\": 0.861667,\n        \"num_unique_values\": 499,\n        \"samples\": [\n          0.544167,\n          0.430435\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"atemp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.16296117838631127,\n        \"min\": 0.0790696,\n        \"max\": 0.840896,\n        \"num_unique_values\": 690,\n        \"samples\": [\n          0.463375,\n          0.599754\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"hum\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.14242909513835394,\n        \"min\": 0.0,\n        \"max\": 0.9725,\n        \"num_unique_values\": 595,\n        \"samples\": [\n          0.707083,\n          0.718333\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"windspeed\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.07749787068166943,\n        \"min\": 0.0223917,\n        \"max\": 0.507463,\n        \"num_unique_values\": 650,\n        \"samples\": [\n          0.100742,\n          0.139308\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"casual\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 686,\n        \"min\": 2,\n        \"max\": 3410,\n        \"num_unique_values\": 606,\n        \"samples\": [\n          709,\n          449\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"registered\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1560,\n        \"min\": 20,\n        \"max\": 6946,\n        \"num_unique_values\": 679,\n        \"samples\": [\n          4531,\n          2553\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cnt\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1937,\n        \"min\": 22,\n        \"max\": 8714,\n        \"num_unique_values\": 696,\n        \"samples\": [\n          5170,\n          1607\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 41
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "hour_df.head()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 313
        },
        "id": "OWj0QZUrLAQM",
        "outputId": "79d17ab6-b39c-423a-b3e5-a124bf43c92c"
      },
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   instant      dteday  season  yr  mnth  hr  holiday  weekday  workingday  \\\n",
              "0        1  2011-01-01       1   0     1   0        0        6           0   \n",
              "1        2  2011-01-01       1   0     1   1        0        6           0   \n",
              "2        3  2011-01-01       1   0     1   2        0        6           0   \n",
              "3        4  2011-01-01       1   0     1   3        0        6           0   \n",
              "4        5  2011-01-01       1   0     1   4        0        6           0   \n",
              "\n",
              "   weathersit  temp   atemp   hum  windspeed  casual  registered  cnt  \n",
              "0           1  0.24  0.2879  0.81        0.0       3          13   16  \n",
              "1           1  0.22  0.2727  0.80        0.0       8          32   40  \n",
              "2           1  0.22  0.2727  0.80        0.0       5          27   32  \n",
              "3           1  0.24  0.2879  0.75        0.0       3          10   13  \n",
              "4           1  0.24  0.2879  0.75        0.0       0           1    1  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9e37eeb6-d264-4b69-ad9a-537517091333\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>instant</th>\n",
              "      <th>dteday</th>\n",
              "      <th>season</th>\n",
              "      <th>yr</th>\n",
              "      <th>mnth</th>\n",
              "      <th>hr</th>\n",
              "      <th>holiday</th>\n",
              "      <th>weekday</th>\n",
              "      <th>workingday</th>\n",
              "      <th>weathersit</th>\n",
              "      <th>temp</th>\n",
              "      <th>atemp</th>\n",
              "      <th>hum</th>\n",
              "      <th>windspeed</th>\n",
              "      <th>casual</th>\n",
              "      <th>registered</th>\n",
              "      <th>cnt</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>2011-01-01</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0.24</td>\n",
              "      <td>0.2879</td>\n",
              "      <td>0.81</td>\n",
              "      <td>0.0</td>\n",
              "      <td>3</td>\n",
              "      <td>13</td>\n",
              "      <td>16</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>2011-01-01</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0.22</td>\n",
              "      <td>0.2727</td>\n",
              "      <td>0.80</td>\n",
              "      <td>0.0</td>\n",
              "      <td>8</td>\n",
              "      <td>32</td>\n",
              "      <td>40</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>2011-01-01</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0.22</td>\n",
              "      <td>0.2727</td>\n",
              "      <td>0.80</td>\n",
              "      <td>0.0</td>\n",
              "      <td>5</td>\n",
              "      <td>27</td>\n",
              "      <td>32</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>2011-01-01</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0.24</td>\n",
              "      <td>0.2879</td>\n",
              "      <td>0.75</td>\n",
              "      <td>0.0</td>\n",
              "      <td>3</td>\n",
              "      <td>10</td>\n",
              "      <td>13</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>2011-01-01</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0.24</td>\n",
              "      <td>0.2879</td>\n",
              "      <td>0.75</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9e37eeb6-d264-4b69-ad9a-537517091333')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-9e37eeb6-d264-4b69-ad9a-537517091333 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-9e37eeb6-d264-4b69-ad9a-537517091333');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-aae3a074-02eb-42df-b310-8aa97d850c9c\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-aae3a074-02eb-42df-b310-8aa97d850c9c')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-aae3a074-02eb-42df-b310-8aa97d850c9c button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "hour_df",
              "summary": "{\n  \"name\": \"hour_df\",\n  \"rows\": 17379,\n  \"fields\": [\n    {\n      \"column\": \"instant\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5017,\n        \"min\": 1,\n        \"max\": 17379,\n        \"num_unique_values\": 17379,\n        \"samples\": [\n          12831,\n          8689,\n          7092\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"dteday\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 731,\n        \"samples\": [\n          \"2012-12-04\",\n          \"2011-02-03\",\n          \"2011-10-28\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"season\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 4,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2,\n          4,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"yr\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mnth\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 1,\n        \"max\": 12,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          11,\n          10\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"hr\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6,\n        \"min\": 0,\n        \"max\": 23,\n        \"num_unique_values\": 24,\n        \"samples\": [\n          8,\n          16\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"holiday\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"weekday\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 0,\n        \"max\": 6,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          6,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"workingday\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"weathersit\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 4,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2,\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"temp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.19255612124972407,\n        \"min\": 0.02,\n        \"max\": 1.0,\n        \"num_unique_values\": 50,\n        \"samples\": [\n          0.16,\n          0.82\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"atemp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.17185021563536587,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 65,\n        \"samples\": [\n          0.7879,\n          0.9242\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"hum\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.1929298340629125,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 89,\n        \"samples\": [\n          0.29,\n          0.61\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"windspeed\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.12234022857279413,\n        \"min\": 0.0,\n        \"max\": 0.8507,\n        \"num_unique_values\": 30,\n        \"samples\": [\n          0.8507,\n          0.4925\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"casual\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 49,\n        \"min\": 0,\n        \"max\": 367,\n        \"num_unique_values\": 322,\n        \"samples\": [\n          201,\n          171\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"registered\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 151,\n        \"min\": 0,\n        \"max\": 886,\n        \"num_unique_values\": 776,\n        \"samples\": [\n          342,\n          744\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cnt\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 181,\n        \"min\": 1,\n        \"max\": 977,\n        \"num_unique_values\": 869,\n        \"samples\": [\n          594,\n          46\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 42
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "FHSiqaZp8DC1"
      },
      "source": [
        "### Assessing Data"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Melihat informasi dataset day_df\n",
        "day_df.info()\n",
        "\n"
      ],
      "metadata": {
        "id": "ax-3tEjc9Cj1",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "18df21f2-9b15-4531-fa10-16c9823b8d06"
      },
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 731 entries, 0 to 730\n",
            "Data columns (total 16 columns):\n",
            " #   Column      Non-Null Count  Dtype  \n",
            "---  ------      --------------  -----  \n",
            " 0   instant     731 non-null    int64  \n",
            " 1   dteday      731 non-null    object \n",
            " 2   season      731 non-null    int64  \n",
            " 3   yr          731 non-null    int64  \n",
            " 4   mnth        731 non-null    int64  \n",
            " 5   holiday     731 non-null    int64  \n",
            " 6   weekday     731 non-null    int64  \n",
            " 7   workingday  731 non-null    int64  \n",
            " 8   weathersit  731 non-null    int64  \n",
            " 9   temp        731 non-null    float64\n",
            " 10  atemp       731 non-null    float64\n",
            " 11  hum         731 non-null    float64\n",
            " 12  windspeed   731 non-null    float64\n",
            " 13  casual      731 non-null    int64  \n",
            " 14  registered  731 non-null    int64  \n",
            " 15  cnt         731 non-null    int64  \n",
            "dtypes: float64(4), int64(11), object(1)\n",
            "memory usage: 91.5+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Memeriksa apakah ada data yang kosong\n",
        "day_df.isnull().sum()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 585
        },
        "id": "v9ZuQ9MAMJ4h",
        "outputId": "5d7554d1-43cf-4027-8aff-145517883ba4"
      },
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "instant       0\n",
              "dteday        0\n",
              "season        0\n",
              "yr            0\n",
              "mnth          0\n",
              "holiday       0\n",
              "weekday       0\n",
              "workingday    0\n",
              "weathersit    0\n",
              "temp          0\n",
              "atemp         0\n",
              "hum           0\n",
              "windspeed     0\n",
              "casual        0\n",
              "registered    0\n",
              "cnt           0\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>instant</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>dteday</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>season</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>yr</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mnth</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>holiday</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>weekday</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>workingday</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>weathersit</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>temp</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>atemp</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>hum</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>windspeed</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>casual</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>registered</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>cnt</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 44
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Melihat informasi dataset hour_df\n",
        "hour_df.info()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6Lk7jUj-MH82",
        "outputId": "54716b73-1a20-4018-ccb9-330bf8b25232"
      },
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 17379 entries, 0 to 17378\n",
            "Data columns (total 17 columns):\n",
            " #   Column      Non-Null Count  Dtype  \n",
            "---  ------      --------------  -----  \n",
            " 0   instant     17379 non-null  int64  \n",
            " 1   dteday      17379 non-null  object \n",
            " 2   season      17379 non-null  int64  \n",
            " 3   yr          17379 non-null  int64  \n",
            " 4   mnth        17379 non-null  int64  \n",
            " 5   hr          17379 non-null  int64  \n",
            " 6   holiday     17379 non-null  int64  \n",
            " 7   weekday     17379 non-null  int64  \n",
            " 8   workingday  17379 non-null  int64  \n",
            " 9   weathersit  17379 non-null  int64  \n",
            " 10  temp        17379 non-null  float64\n",
            " 11  atemp       17379 non-null  float64\n",
            " 12  hum         17379 non-null  float64\n",
            " 13  windspeed   17379 non-null  float64\n",
            " 14  casual      17379 non-null  int64  \n",
            " 15  registered  17379 non-null  int64  \n",
            " 16  cnt         17379 non-null  int64  \n",
            "dtypes: float64(4), int64(12), object(1)\n",
            "memory usage: 2.3+ MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Melihat apakah ada data yang kosong\n",
        "hour_df.isnull().sum()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 617
        },
        "id": "K7DNIh2yMNIG",
        "outputId": "22fce59f-d869-448b-813b-32faf7f713f2"
      },
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "instant       0\n",
              "dteday        0\n",
              "season        0\n",
              "yr            0\n",
              "mnth          0\n",
              "hr            0\n",
              "holiday       0\n",
              "weekday       0\n",
              "workingday    0\n",
              "weathersit    0\n",
              "temp          0\n",
              "atemp         0\n",
              "hum           0\n",
              "windspeed     0\n",
              "casual        0\n",
              "registered    0\n",
              "cnt           0\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>instant</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>dteday</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>season</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>yr</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mnth</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>hr</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>holiday</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>weekday</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>workingday</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>weathersit</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>temp</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>atemp</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>hum</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>windspeed</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>casual</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>registered</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>cnt</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 46
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Memeriksa apakah ada data yang terduplikasi\n",
        "print(\"Jumlah duplikasi: \", day_df.duplicated().sum())\n",
        "print(\"Jumlah duplikasi: \", hour_df.duplicated().sum())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fu0CS_FVMSb3",
        "outputId": "72d6c99a-a133-45db-f5ff-8116212bccd8"
      },
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Jumlah duplikasi:  0\n",
            "Jumlah duplikasi:  0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Melihat apakah ada data yang janggal\n",
        "day_df.describe()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 320
        },
        "id": "0fCRDnViMUY5",
        "outputId": "f3d17a1d-fb86-441c-89ab-2357d7af3c41"
      },
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          instant      season          yr        mnth     holiday     weekday  \\\n",
              "count  731.000000  731.000000  731.000000  731.000000  731.000000  731.000000   \n",
              "mean   366.000000    2.496580    0.500684    6.519836    0.028728    2.997264   \n",
              "std    211.165812    1.110807    0.500342    3.451913    0.167155    2.004787   \n",
              "min      1.000000    1.000000    0.000000    1.000000    0.000000    0.000000   \n",
              "25%    183.500000    2.000000    0.000000    4.000000    0.000000    1.000000   \n",
              "50%    366.000000    3.000000    1.000000    7.000000    0.000000    3.000000   \n",
              "75%    548.500000    3.000000    1.000000   10.000000    0.000000    5.000000   \n",
              "max    731.000000    4.000000    1.000000   12.000000    1.000000    6.000000   \n",
              "\n",
              "       workingday  weathersit        temp       atemp         hum   windspeed  \\\n",
              "count  731.000000  731.000000  731.000000  731.000000  731.000000  731.000000   \n",
              "mean     0.683995    1.395349    0.495385    0.474354    0.627894    0.190486   \n",
              "std      0.465233    0.544894    0.183051    0.162961    0.142429    0.077498   \n",
              "min      0.000000    1.000000    0.059130    0.079070    0.000000    0.022392   \n",
              "25%      0.000000    1.000000    0.337083    0.337842    0.520000    0.134950   \n",
              "50%      1.000000    1.000000    0.498333    0.486733    0.626667    0.180975   \n",
              "75%      1.000000    2.000000    0.655417    0.608602    0.730209    0.233214   \n",
              "max      1.000000    3.000000    0.861667    0.840896    0.972500    0.507463   \n",
              "\n",
              "            casual   registered          cnt  \n",
              "count   731.000000   731.000000   731.000000  \n",
              "mean    848.176471  3656.172367  4504.348837  \n",
              "std     686.622488  1560.256377  1937.211452  \n",
              "min       2.000000    20.000000    22.000000  \n",
              "25%     315.500000  2497.000000  3152.000000  \n",
              "50%     713.000000  3662.000000  4548.000000  \n",
              "75%    1096.000000  4776.500000  5956.000000  \n",
              "max    3410.000000  6946.000000  8714.000000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7c1a18ca-545c-4edd-9ac9-8e9190a6316e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>instant</th>\n",
              "      <th>season</th>\n",
              "      <th>yr</th>\n",
              "      <th>mnth</th>\n",
              "      <th>holiday</th>\n",
              "      <th>weekday</th>\n",
              "      <th>workingday</th>\n",
              "      <th>weathersit</th>\n",
              "      <th>temp</th>\n",
              "      <th>atemp</th>\n",
              "      <th>hum</th>\n",
              "      <th>windspeed</th>\n",
              "      <th>casual</th>\n",
              "      <th>registered</th>\n",
              "      <th>cnt</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>731.000000</td>\n",
              "      <td>731.000000</td>\n",
              "      <td>731.000000</td>\n",
              "      <td>731.000000</td>\n",
              "      <td>731.000000</td>\n",
              "      <td>731.000000</td>\n",
              "      <td>731.000000</td>\n",
              "      <td>731.000000</td>\n",
              "      <td>731.000000</td>\n",
              "      <td>731.000000</td>\n",
              "      <td>731.000000</td>\n",
              "      <td>731.000000</td>\n",
              "      <td>731.000000</td>\n",
              "      <td>731.000000</td>\n",
              "      <td>731.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>366.000000</td>\n",
              "      <td>2.496580</td>\n",
              "      <td>0.500684</td>\n",
              "      <td>6.519836</td>\n",
              "      <td>0.028728</td>\n",
              "      <td>2.997264</td>\n",
              "      <td>0.683995</td>\n",
              "      <td>1.395349</td>\n",
              "      <td>0.495385</td>\n",
              "      <td>0.474354</td>\n",
              "      <td>0.627894</td>\n",
              "      <td>0.190486</td>\n",
              "      <td>848.176471</td>\n",
              "      <td>3656.172367</td>\n",
              "      <td>4504.348837</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>211.165812</td>\n",
              "      <td>1.110807</td>\n",
              "      <td>0.500342</td>\n",
              "      <td>3.451913</td>\n",
              "      <td>0.167155</td>\n",
              "      <td>2.004787</td>\n",
              "      <td>0.465233</td>\n",
              "      <td>0.544894</td>\n",
              "      <td>0.183051</td>\n",
              "      <td>0.162961</td>\n",
              "      <td>0.142429</td>\n",
              "      <td>0.077498</td>\n",
              "      <td>686.622488</td>\n",
              "      <td>1560.256377</td>\n",
              "      <td>1937.211452</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.059130</td>\n",
              "      <td>0.079070</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.022392</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>20.000000</td>\n",
              "      <td>22.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>183.500000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.337083</td>\n",
              "      <td>0.337842</td>\n",
              "      <td>0.520000</td>\n",
              "      <td>0.134950</td>\n",
              "      <td>315.500000</td>\n",
              "      <td>2497.000000</td>\n",
              "      <td>3152.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>366.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>7.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.498333</td>\n",
              "      <td>0.486733</td>\n",
              "      <td>0.626667</td>\n",
              "      <td>0.180975</td>\n",
              "      <td>713.000000</td>\n",
              "      <td>3662.000000</td>\n",
              "      <td>4548.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>548.500000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>10.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>5.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>0.655417</td>\n",
              "      <td>0.608602</td>\n",
              "      <td>0.730209</td>\n",
              "      <td>0.233214</td>\n",
              "      <td>1096.000000</td>\n",
              "      <td>4776.500000</td>\n",
              "      <td>5956.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>731.000000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>12.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>6.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>0.861667</td>\n",
              "      <td>0.840896</td>\n",
              "      <td>0.972500</td>\n",
              "      <td>0.507463</td>\n",
              "      <td>3410.000000</td>\n",
              "      <td>6946.000000</td>\n",
              "      <td>8714.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7c1a18ca-545c-4edd-9ac9-8e9190a6316e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-7c1a18ca-545c-4edd-9ac9-8e9190a6316e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-7c1a18ca-545c-4edd-9ac9-8e9190a6316e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-91d163e1-be66-480e-9fd0-2c1ca0d5bf44\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-91d163e1-be66-480e-9fd0-2c1ca0d5bf44')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-91d163e1-be66-480e-9fd0-2c1ca0d5bf44 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"day_df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"instant\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 263.151210562102,\n        \"min\": 1.0,\n        \"max\": 731.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          731.0,\n          366.0,\n          548.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"season\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 257.61068803932375,\n        \"min\": 1.0,\n        \"max\": 731.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          731.0,\n          2.496580027359781,\n          3.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"yr\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 258.2457820210964,\n        \"min\": 0.0,\n        \"max\": 731.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.5006839945280438,\n          1.0,\n          0.5003418803818294\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mnth\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 256.251208377565,\n        \"min\": 1.0,\n        \"max\": 731.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          6.519835841313269,\n          7.0,\n          731.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"holiday\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 258.38735524952386,\n        \"min\": 0.0,\n        \"max\": 731.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.028727770177838577,\n          1.0,\n          0.16715474262247393\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"weekday\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 257.4447215833011,\n        \"min\": 0.0,\n        \"max\": 731.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          2.997264021887825,\n          3.0,\n          731.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"workingday\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 258.23829965962693,\n        \"min\": 0.0,\n        \"max\": 731.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.6839945280437757,\n          1.0,\n          0.46523338667770103\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"weathersit\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 257.94661363848155,\n        \"min\": 0.5448943419593629,\n        \"max\": 731.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          731.0,\n          1.3953488372093024,\n          3.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"temp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 258.2915817037473,\n        \"min\": 0.0591304,\n        \"max\": 731.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.495384788508892,\n          0.498333,\n          731.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"atemp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 258.2966006263005,\n        \"min\": 0.0790696,\n        \"max\": 731.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.47435398864569084,\n          0.486733,\n          731.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"hum\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 258.26489554668353,\n        \"min\": 0.0,\n        \"max\": 731.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.6278940629274967,\n          0.626667,\n          731.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"windspeed\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 258.37953633824185,\n        \"min\": 0.0223917,\n        \"max\": 731.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.190486211627907,\n          0.180975,\n          731.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"casual\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1038.746523887882,\n        \"min\": 2.0,\n        \"max\": 3410.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          848.1764705882352,\n          713.0,\n          731.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"registered\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2266.131168472822,\n        \"min\": 20.0,\n        \"max\": 6946.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          3656.172366621067,\n          3662.0,\n          731.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cnt\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2862.2176347716063,\n        \"min\": 22.0,\n        \"max\": 8714.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          4504.3488372093025,\n          4548.0,\n          731.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 48
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "hour_df.describe()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 320
        },
        "id": "i_VHXaAaMWXK",
        "outputId": "7d41d116-d014-4c9a-d756-000a9a159f71"
      },
      "execution_count": 49,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          instant        season            yr          mnth            hr  \\\n",
              "count  17379.0000  17379.000000  17379.000000  17379.000000  17379.000000   \n",
              "mean    8690.0000      2.501640      0.502561      6.537775     11.546752   \n",
              "std     5017.0295      1.106918      0.500008      3.438776      6.914405   \n",
              "min        1.0000      1.000000      0.000000      1.000000      0.000000   \n",
              "25%     4345.5000      2.000000      0.000000      4.000000      6.000000   \n",
              "50%     8690.0000      3.000000      1.000000      7.000000     12.000000   \n",
              "75%    13034.5000      3.000000      1.000000     10.000000     18.000000   \n",
              "max    17379.0000      4.000000      1.000000     12.000000     23.000000   \n",
              "\n",
              "            holiday       weekday    workingday    weathersit          temp  \\\n",
              "count  17379.000000  17379.000000  17379.000000  17379.000000  17379.000000   \n",
              "mean       0.028770      3.003683      0.682721      1.425283      0.496987   \n",
              "std        0.167165      2.005771      0.465431      0.639357      0.192556   \n",
              "min        0.000000      0.000000      0.000000      1.000000      0.020000   \n",
              "25%        0.000000      1.000000      0.000000      1.000000      0.340000   \n",
              "50%        0.000000      3.000000      1.000000      1.000000      0.500000   \n",
              "75%        0.000000      5.000000      1.000000      2.000000      0.660000   \n",
              "max        1.000000      6.000000      1.000000      4.000000      1.000000   \n",
              "\n",
              "              atemp           hum     windspeed        casual    registered  \\\n",
              "count  17379.000000  17379.000000  17379.000000  17379.000000  17379.000000   \n",
              "mean       0.475775      0.627229      0.190098     35.676218    153.786869   \n",
              "std        0.171850      0.192930      0.122340     49.305030    151.357286   \n",
              "min        0.000000      0.000000      0.000000      0.000000      0.000000   \n",
              "25%        0.333300      0.480000      0.104500      4.000000     34.000000   \n",
              "50%        0.484800      0.630000      0.194000     17.000000    115.000000   \n",
              "75%        0.621200      0.780000      0.253700     48.000000    220.000000   \n",
              "max        1.000000      1.000000      0.850700    367.000000    886.000000   \n",
              "\n",
              "                cnt  \n",
              "count  17379.000000  \n",
              "mean     189.463088  \n",
              "std      181.387599  \n",
              "min        1.000000  \n",
              "25%       40.000000  \n",
              "50%      142.000000  \n",
              "75%      281.000000  \n",
              "max      977.000000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-cedc9b59-6372-4e79-bdaf-42ef9adb7d9c\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>instant</th>\n",
              "      <th>season</th>\n",
              "      <th>yr</th>\n",
              "      <th>mnth</th>\n",
              "      <th>hr</th>\n",
              "      <th>holiday</th>\n",
              "      <th>weekday</th>\n",
              "      <th>workingday</th>\n",
              "      <th>weathersit</th>\n",
              "      <th>temp</th>\n",
              "      <th>atemp</th>\n",
              "      <th>hum</th>\n",
              "      <th>windspeed</th>\n",
              "      <th>casual</th>\n",
              "      <th>registered</th>\n",
              "      <th>cnt</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>17379.0000</td>\n",
              "      <td>17379.000000</td>\n",
              "      <td>17379.000000</td>\n",
              "      <td>17379.000000</td>\n",
              "      <td>17379.000000</td>\n",
              "      <td>17379.000000</td>\n",
              "      <td>17379.000000</td>\n",
              "      <td>17379.000000</td>\n",
              "      <td>17379.000000</td>\n",
              "      <td>17379.000000</td>\n",
              "      <td>17379.000000</td>\n",
              "      <td>17379.000000</td>\n",
              "      <td>17379.000000</td>\n",
              "      <td>17379.000000</td>\n",
              "      <td>17379.000000</td>\n",
              "      <td>17379.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>8690.0000</td>\n",
              "      <td>2.501640</td>\n",
              "      <td>0.502561</td>\n",
              "      <td>6.537775</td>\n",
              "      <td>11.546752</td>\n",
              "      <td>0.028770</td>\n",
              "      <td>3.003683</td>\n",
              "      <td>0.682721</td>\n",
              "      <td>1.425283</td>\n",
              "      <td>0.496987</td>\n",
              "      <td>0.475775</td>\n",
              "      <td>0.627229</td>\n",
              "      <td>0.190098</td>\n",
              "      <td>35.676218</td>\n",
              "      <td>153.786869</td>\n",
              "      <td>189.463088</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>5017.0295</td>\n",
              "      <td>1.106918</td>\n",
              "      <td>0.500008</td>\n",
              "      <td>3.438776</td>\n",
              "      <td>6.914405</td>\n",
              "      <td>0.167165</td>\n",
              "      <td>2.005771</td>\n",
              "      <td>0.465431</td>\n",
              "      <td>0.639357</td>\n",
              "      <td>0.192556</td>\n",
              "      <td>0.171850</td>\n",
              "      <td>0.192930</td>\n",
              "      <td>0.122340</td>\n",
              "      <td>49.305030</td>\n",
              "      <td>151.357286</td>\n",
              "      <td>181.387599</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>1.0000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.020000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>4345.5000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>6.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.340000</td>\n",
              "      <td>0.333300</td>\n",
              "      <td>0.480000</td>\n",
              "      <td>0.104500</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>34.000000</td>\n",
              "      <td>40.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>8690.0000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>7.000000</td>\n",
              "      <td>12.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.500000</td>\n",
              "      <td>0.484800</td>\n",
              "      <td>0.630000</td>\n",
              "      <td>0.194000</td>\n",
              "      <td>17.000000</td>\n",
              "      <td>115.000000</td>\n",
              "      <td>142.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>13034.5000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>10.000000</td>\n",
              "      <td>18.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>5.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>0.660000</td>\n",
              "      <td>0.621200</td>\n",
              "      <td>0.780000</td>\n",
              "      <td>0.253700</td>\n",
              "      <td>48.000000</td>\n",
              "      <td>220.000000</td>\n",
              "      <td>281.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>17379.0000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>12.000000</td>\n",
              "      <td>23.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>6.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.850700</td>\n",
              "      <td>367.000000</td>\n",
              "      <td>886.000000</td>\n",
              "      <td>977.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-cedc9b59-6372-4e79-bdaf-42ef9adb7d9c')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-cedc9b59-6372-4e79-bdaf-42ef9adb7d9c button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-cedc9b59-6372-4e79-bdaf-42ef9adb7d9c');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-af3fbd54-a5e3-4ade-9920-9efdfaac7590\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-af3fbd54-a5e3-4ade-9920-9efdfaac7590')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-af3fbd54-a5e3-4ade-9920-9efdfaac7590 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"hour_df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"instant\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6263.17088569678,\n        \"min\": 1.0,\n        \"max\": 17379.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          17379.0,\n          8690.0,\n          13034.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"season\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6143.565598544762,\n        \"min\": 1.0,\n        \"max\": 17379.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          17379.0,\n          2.5016399102364923,\n          3.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"yr\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6144.202229000585,\n        \"min\": 0.0,\n        \"max\": 17379.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.5025605615973301,\n          1.0,\n          0.5000078290910674\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mnth\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6142.184250617928,\n        \"min\": 1.0,\n        \"max\": 17379.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          6.537775476149376,\n          7.0,\n          17379.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"hr\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6140.496148184536,\n        \"min\": 0.0,\n        \"max\": 17379.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          11.546751826917545,\n          12.0,\n          17379.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"holiday\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6144.34398083374,\n        \"min\": 0.0,\n        \"max\": 17379.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.028770355026181024,\n          1.0,\n          0.16716527638435244\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"weekday\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6143.394057236404,\n        \"min\": 0.0,\n        \"max\": 17379.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          3.003682605443351,\n          3.0,\n          17379.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"workingday\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6144.194876084176,\n        \"min\": 0.0,\n        \"max\": 17379.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.6827205247712756,\n          1.0,\n          0.46543063352387354\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"weathersit\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6143.845618830189,\n        \"min\": 0.6393568777543036,\n        \"max\": 17379.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          17379.0,\n          1.425283387997008,\n          4.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"temp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6144.242275843299,\n        \"min\": 0.02,\n        \"max\": 17379.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.4969871684216583,\n          0.5,\n          17379.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"atemp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6144.248469131704,\n        \"min\": 0.0,\n        \"max\": 17379.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.4757751021347604,\n          0.4848,\n          17379.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"hum\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6144.216991945488,\n        \"min\": 0.0,\n        \"max\": 17379.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.6272288394038783,\n          0.63,\n          17379.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"windspeed\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6144.317742909861,\n        \"min\": 0.0,\n        \"max\": 17379.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.1900976063064618,\n          0.194,\n          17379.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"casual\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6119.284233238239,\n        \"min\": 0.0,\n        \"max\": 17379.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          35.67621842453536,\n          17.0,\n          17379.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"registered\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6072.038722856437,\n        \"min\": 0.0,\n        \"max\": 17379.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          153.78686920996606,\n          115.0,\n          17379.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cnt\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6060.617601280442,\n        \"min\": 1.0,\n        \"max\": 17379.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          189.46308763450142,\n          142.0,\n          17379.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 49
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Insight:**\n",
        "- Kolom 'dteday' masih tersimpan dengan tipe data object\n",
        "- Kolom 'season', 'mnth', 'weekday', dan 'weathersit' masih tersimpan dengan tipe data integer\n",
        "- Value pada 'season', mnth', 'weathersit', 'day' , 'weekday', dan 'year' direpresentasikan dengan integer\n",
        "- Value 'temp', 'atemp', 'hum', dan 'windspeed' tidak direpresentasikan dengan nilai sebenarnya"
      ],
      "metadata": {
        "id": "7dtxhAPrkhPL"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "EhN5R4hr8DC1"
      },
      "source": [
        "### Cleaning Data"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Mengubah datetime\n",
        "day_df['dteday'] = pd.to_datetime(day_df['dteday'])\n",
        "hour_df['dteday'] = pd.to_datetime(hour_df['dteday'])\n"
      ],
      "metadata": {
        "id": "rITnXwNmSeY6"
      },
      "execution_count": 50,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Mengubah category\n",
        "columns = [ 'season', 'mnth', 'weekday', 'weathersit' ]\n",
        "for column in columns:\n",
        "    day_df[column] =  day_df[column].astype(\"category\")\n",
        "    hour_df[column] =  hour_df[column].astype(\"category\")\n",
        "\n",
        "day_df.info()\n",
        "hour_df.info()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wZXA5ExKcCwp",
        "outputId": "d81e35d4-715e-420f-bf20-45b2676838ad"
      },
      "execution_count": 51,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 731 entries, 0 to 730\n",
            "Data columns (total 16 columns):\n",
            " #   Column      Non-Null Count  Dtype         \n",
            "---  ------      --------------  -----         \n",
            " 0   instant     731 non-null    int64         \n",
            " 1   dteday      731 non-null    datetime64[ns]\n",
            " 2   season      731 non-null    category      \n",
            " 3   yr          731 non-null    int64         \n",
            " 4   mnth        731 non-null    category      \n",
            " 5   holiday     731 non-null    int64         \n",
            " 6   weekday     731 non-null    category      \n",
            " 7   workingday  731 non-null    int64         \n",
            " 8   weathersit  731 non-null    category      \n",
            " 9   temp        731 non-null    float64       \n",
            " 10  atemp       731 non-null    float64       \n",
            " 11  hum         731 non-null    float64       \n",
            " 12  windspeed   731 non-null    float64       \n",
            " 13  casual      731 non-null    int64         \n",
            " 14  registered  731 non-null    int64         \n",
            " 15  cnt         731 non-null    int64         \n",
            "dtypes: category(4), datetime64[ns](1), float64(4), int64(7)\n",
            "memory usage: 72.6 KB\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 17379 entries, 0 to 17378\n",
            "Data columns (total 17 columns):\n",
            " #   Column      Non-Null Count  Dtype         \n",
            "---  ------      --------------  -----         \n",
            " 0   instant     17379 non-null  int64         \n",
            " 1   dteday      17379 non-null  datetime64[ns]\n",
            " 2   season      17379 non-null  category      \n",
            " 3   yr          17379 non-null  int64         \n",
            " 4   mnth        17379 non-null  category      \n",
            " 5   hr          17379 non-null  int64         \n",
            " 6   holiday     17379 non-null  int64         \n",
            " 7   weekday     17379 non-null  category      \n",
            " 8   workingday  17379 non-null  int64         \n",
            " 9   weathersit  17379 non-null  category      \n",
            " 10  temp        17379 non-null  float64       \n",
            " 11  atemp       17379 non-null  float64       \n",
            " 12  hum         17379 non-null  float64       \n",
            " 13  windspeed   17379 non-null  float64       \n",
            " 14  casual      17379 non-null  int64         \n",
            " 15  registered  17379 non-null  int64         \n",
            " 16  cnt         17379 non-null  int64         \n",
            "dtypes: category(4), datetime64[ns](1), float64(4), int64(8)\n",
            "memory usage: 1.8 MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Mengubah value season\n",
        "season_value = {\n",
        "    1: 'Spring',\n",
        "    2: 'Summer',\n",
        "    3: 'Fall',\n",
        "    4: 'Snow'\n",
        "}\n",
        "\n",
        "day_df['season'] = day_df['season'].map(season_value)\n",
        "hour_df['season'] = hour_df['season'].map(season_value)\n"
      ],
      "metadata": {
        "id": "I92uWw2uc6uj"
      },
      "execution_count": 52,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Mengubah value mnth\n",
        "\n",
        "mnth_value = {\n",
        "    1: 'Januari',\n",
        "    2: 'Februari',\n",
        "    3: 'Maret',\n",
        "    4: 'April',\n",
        "    5: 'Mei',\n",
        "    6: 'Juni',\n",
        "    7: 'Juli',\n",
        "    8: 'Agustus',\n",
        "    9: 'September',\n",
        "    10: 'Oktober',\n",
        "    11: 'November',\n",
        "    12: 'Desember'\n",
        "}\n",
        "day_df['mnth'] = day_df['mnth'].map(mnth_value)\n",
        "hour_df['mnth'] = hour_df['mnth'].map(mnth_value)\n",
        "\n"
      ],
      "metadata": {
        "id": "JO-NjETudRL3"
      },
      "execution_count": 53,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Mengubah value weathersit\n",
        "\n",
        "weathers_value = {\n",
        "    1: 'Clear',\n",
        "    2: 'Cloudy',\n",
        "    3: 'Light Rain Snow',\n",
        "    4: 'Heavy Rain Snow'\n",
        "}\n",
        "day_df['weathersit'] = day_df['weathersit'].map(weathers_value)\n",
        "hour_df['weathersit'] = hour_df['weathersit'].map(weathers_value)\n"
      ],
      "metadata": {
        "id": "Jg99O_r0dtjX"
      },
      "execution_count": 54,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Mengubah value day\n",
        "day_values = {\n",
        "    0: 'Minggu',\n",
        "    1: 'Senin',\n",
        "    2: 'Selasa',\n",
        "    3: 'Rabu',\n",
        "    4: 'Kamis',\n",
        "    5: 'Jumat',\n",
        "    6: 'Sabtu'\n",
        "}\n",
        "\n",
        "day_df['weekday'] = day_df['weekday'].map(day_values)\n",
        "hour_df['weekday'] = hour_df['weekday'].map(day_values)\n"
      ],
      "metadata": {
        "id": "iCRr0RcOePro"
      },
      "execution_count": 55,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Mengubah value yr\n",
        "year_values = {\n",
        "    0: '2011',\n",
        "    1: '2012'\n",
        "}\n",
        "\n",
        "day_df['yr'] = day_df['yr'].map(year_values)\n",
        "hour_df['yr'] = hour_df['yr'].map(year_values)\n"
      ],
      "metadata": {
        "id": "G_aqsBrvfcfZ"
      },
      "execution_count": 56,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Mengubah value holiday\n",
        "holiday_values = {\n",
        "    0: 'Off Season',\n",
        "    1: 'Holiday'\n",
        "}\n",
        "\n",
        "day_df['holiday'] = day_df['holiday'].map(holiday_values)\n",
        "hour_df['holiday'] = hour_df['holiday'].map(holiday_values)\n"
      ],
      "metadata": {
        "id": "1BLTE0DWoOmU"
      },
      "execution_count": 57,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Mengembalikan temperature, humidity, dan wind_speed ke nilai bulat aslinya\n",
        "\n",
        "day_df['temp'] = (day_df['temp'] * 41).round().astype(int)\n",
        "day_df['hum'] = (day_df['hum'] * 100).round().astype(int)\n",
        "day_df['windspeed'] = (day_df['windspeed'] * 67).round().astype(int)\n",
        "\n",
        "hour_df['temp'] = (hour_df['temp'] * 41).round().astype(int)\n",
        "hour_df['hum'] = (hour_df['hum'] * 100).round().astype(int)\n",
        "hour_df['windspeed'] = (hour_df['windspeed'] * 67).round().astype(int)\n",
        "\n"
      ],
      "metadata": {
        "id": "u80vek-Hfs0P"
      },
      "execution_count": 58,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Menghapus 'atemp'\n",
        "day_df = day_df.drop(columns = \"atemp\")\n",
        "hou_df = hour_df.drop(columns = \"atemp\")"
      ],
      "metadata": {
        "id": "_LdIijRkhloV"
      },
      "execution_count": 59,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Mengubah nama kolom pada day_df\n",
        "day_df.rename(columns={\n",
        "    'yr': 'year',\n",
        "    'dteday': 'date',\n",
        "    'mnth': 'month',\n",
        "    'weekday': 'day',\n",
        "    'weathersit': 'weather_situation',\n",
        "    'cnt': 'count_total',\n",
        "    'hum': 'humidity',\n",
        "    'temp': 'temperature',\n",
        "}, inplace=True)\n",
        "\n",
        "day_df.columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zbz1TRX-gZqx",
        "outputId": "c69a2d4d-48fa-4174-fb21-71f802ec9317"
      },
      "execution_count": 60,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['instant', 'date', 'season', 'year', 'month', 'holiday', 'day',\n",
              "       'workingday', 'weather_situation', 'temperature', 'humidity',\n",
              "       'windspeed', 'casual', 'registered', 'count_total'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 60
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Mengubah nama kolom pada hour_df\n",
        "hour_df.rename(columns={\n",
        "    'yr': 'year',\n",
        "    'dteday': 'date',\n",
        "    'mnth': 'month',\n",
        "    'weathersit': 'weather_situation',\n",
        "    'windspeed': 'wind_speed',\n",
        "    'cnt': 'count_total',\n",
        "    'hum': 'humidity',\n",
        "    'temp': 'temperature',\n",
        "    'hr': 'hour',\n",
        "    'weekday': 'day'\n",
        "}, inplace=True)\n",
        "\n",
        "hour_df.columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YrF1C3N_guyJ",
        "outputId": "d07ca98b-f5b6-4926-daaf-0353b7a0e682"
      },
      "execution_count": 61,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['instant', 'date', 'season', 'year', 'month', 'hour', 'holiday', 'day',\n",
              "       'workingday', 'weather_situation', 'temperature', 'atemp', 'humidity',\n",
              "       'wind_speed', 'casual', 'registered', 'count_total'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 61
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "day_df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 399
        },
        "id": "6ddomu_JhE6p",
        "outputId": "fb0016b1-fc90-4bf4-dd88-b7a73605efda"
      },
      "execution_count": 62,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   instant       date  season  year    month     holiday     day  workingday  \\\n",
              "0        1 2011-01-01  Spring  2011  Januari  Off Season   Sabtu           0   \n",
              "1        2 2011-01-02  Spring  2011  Januari  Off Season  Minggu           0   \n",
              "2        3 2011-01-03  Spring  2011  Januari  Off Season   Senin           1   \n",
              "3        4 2011-01-04  Spring  2011  Januari  Off Season  Selasa           1   \n",
              "4        5 2011-01-05  Spring  2011  Januari  Off Season    Rabu           1   \n",
              "\n",
              "  weather_situation  temperature  humidity  windspeed  casual  registered  \\\n",
              "0            Cloudy           14        81         11     331         654   \n",
              "1            Cloudy           15        70         17     131         670   \n",
              "2             Clear            8        44         17     120        1229   \n",
              "3             Clear            8        59         11     108        1454   \n",
              "4             Clear            9        44         13      82        1518   \n",
              "\n",
              "   count_total  \n",
              "0          985  \n",
              "1          801  \n",
              "2         1349  \n",
              "3         1562  \n",
              "4         1600  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e1dabf5d-1108-4ced-9b80-10550f13a573\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>instant</th>\n",
              "      <th>date</th>\n",
              "      <th>season</th>\n",
              "      <th>year</th>\n",
              "      <th>month</th>\n",
              "      <th>holiday</th>\n",
              "      <th>day</th>\n",
              "      <th>workingday</th>\n",
              "      <th>weather_situation</th>\n",
              "      <th>temperature</th>\n",
              "      <th>humidity</th>\n",
              "      <th>windspeed</th>\n",
              "      <th>casual</th>\n",
              "      <th>registered</th>\n",
              "      <th>count_total</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>2011-01-01</td>\n",
              "      <td>Spring</td>\n",
              "      <td>2011</td>\n",
              "      <td>Januari</td>\n",
              "      <td>Off Season</td>\n",
              "      <td>Sabtu</td>\n",
              "      <td>0</td>\n",
              "      <td>Cloudy</td>\n",
              "      <td>14</td>\n",
              "      <td>81</td>\n",
              "      <td>11</td>\n",
              "      <td>331</td>\n",
              "      <td>654</td>\n",
              "      <td>985</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>2011-01-02</td>\n",
              "      <td>Spring</td>\n",
              "      <td>2011</td>\n",
              "      <td>Januari</td>\n",
              "      <td>Off Season</td>\n",
              "      <td>Minggu</td>\n",
              "      <td>0</td>\n",
              "      <td>Cloudy</td>\n",
              "      <td>15</td>\n",
              "      <td>70</td>\n",
              "      <td>17</td>\n",
              "      <td>131</td>\n",
              "      <td>670</td>\n",
              "      <td>801</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>2011-01-03</td>\n",
              "      <td>Spring</td>\n",
              "      <td>2011</td>\n",
              "      <td>Januari</td>\n",
              "      <td>Off Season</td>\n",
              "      <td>Senin</td>\n",
              "      <td>1</td>\n",
              "      <td>Clear</td>\n",
              "      <td>8</td>\n",
              "      <td>44</td>\n",
              "      <td>17</td>\n",
              "      <td>120</td>\n",
              "      <td>1229</td>\n",
              "      <td>1349</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>2011-01-04</td>\n",
              "      <td>Spring</td>\n",
              "      <td>2011</td>\n",
              "      <td>Januari</td>\n",
              "      <td>Off Season</td>\n",
              "      <td>Selasa</td>\n",
              "      <td>1</td>\n",
              "      <td>Clear</td>\n",
              "      <td>8</td>\n",
              "      <td>59</td>\n",
              "      <td>11</td>\n",
              "      <td>108</td>\n",
              "      <td>1454</td>\n",
              "      <td>1562</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>2011-01-05</td>\n",
              "      <td>Spring</td>\n",
              "      <td>2011</td>\n",
              "      <td>Januari</td>\n",
              "      <td>Off Season</td>\n",
              "      <td>Rabu</td>\n",
              "      <td>1</td>\n",
              "      <td>Clear</td>\n",
              "      <td>9</td>\n",
              "      <td>44</td>\n",
              "      <td>13</td>\n",
              "      <td>82</td>\n",
              "      <td>1518</td>\n",
              "      <td>1600</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e1dabf5d-1108-4ced-9b80-10550f13a573')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e1dabf5d-1108-4ced-9b80-10550f13a573 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e1dabf5d-1108-4ced-9b80-10550f13a573');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-88583506-af01-4f91-9923-9ddbe81750f8\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-88583506-af01-4f91-9923-9ddbe81750f8')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-88583506-af01-4f91-9923-9ddbe81750f8 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "day_df",
              "summary": "{\n  \"name\": \"day_df\",\n  \"rows\": 731,\n  \"fields\": [\n    {\n      \"column\": \"instant\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 211,\n        \"min\": 1,\n        \"max\": 731,\n        \"num_unique_values\": 731,\n        \"samples\": [\n          704,\n          34,\n          301\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2011-01-01 00:00:00\",\n        \"max\": \"2012-12-31 00:00:00\",\n        \"num_unique_values\": 731,\n        \"samples\": [\n          \"2012-12-04 00:00:00\",\n          \"2011-02-03 00:00:00\",\n          \"2011-10-28 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"season\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Summer\",\n          \"Snow\",\n          \"Spring\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"year\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"2012\",\n          \"2011\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"month\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 12,\n        \"samples\": [\n          \"November\",\n          \"Oktober\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"holiday\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Holiday\",\n          \"Off Season\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"day\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"Sabtu\",\n          \"Minggu\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"workingday\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"weather_situation\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Cloudy\",\n          \"Clear\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"temperature\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7,\n        \"min\": 2,\n        \"max\": 35,\n        \"num_unique_values\": 33,\n        \"samples\": [\n          34,\n          16\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"humidity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14,\n        \"min\": 0,\n        \"max\": 97,\n        \"num_unique_values\": 72,\n        \"samples\": [\n          52,\n          97\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"windspeed\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5,\n        \"min\": 2,\n        \"max\": 34,\n        \"num_unique_values\": 29,\n        \"samples\": [\n          27,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"casual\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 686,\n        \"min\": 2,\n        \"max\": 3410,\n        \"num_unique_values\": 606,\n        \"samples\": [\n          709,\n          449\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"registered\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1560,\n        \"min\": 20,\n        \"max\": 6946,\n        \"num_unique_values\": 679,\n        \"samples\": [\n          4531,\n          2553\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"count_total\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1937,\n        \"min\": 22,\n        \"max\": 8714,\n        \"num_unique_values\": 696,\n        \"samples\": [\n          5170,\n          1607\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 62
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "hour_df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 399
        },
        "id": "PArrlAbYhMSD",
        "outputId": "e969fe6d-56a5-4de4-efef-8676777fd272"
      },
      "execution_count": 63,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   instant       date  season  year    month  hour     holiday    day  \\\n",
              "0        1 2011-01-01  Spring  2011  Januari     0  Off Season  Sabtu   \n",
              "1        2 2011-01-01  Spring  2011  Januari     1  Off Season  Sabtu   \n",
              "2        3 2011-01-01  Spring  2011  Januari     2  Off Season  Sabtu   \n",
              "3        4 2011-01-01  Spring  2011  Januari     3  Off Season  Sabtu   \n",
              "4        5 2011-01-01  Spring  2011  Januari     4  Off Season  Sabtu   \n",
              "\n",
              "   workingday weather_situation  temperature   atemp  humidity  wind_speed  \\\n",
              "0           0             Clear           10  0.2879        81           0   \n",
              "1           0             Clear            9  0.2727        80           0   \n",
              "2           0             Clear            9  0.2727        80           0   \n",
              "3           0             Clear           10  0.2879        75           0   \n",
              "4           0             Clear           10  0.2879        75           0   \n",
              "\n",
              "   casual  registered  count_total  \n",
              "0       3          13           16  \n",
              "1       8          32           40  \n",
              "2       5          27           32  \n",
              "3       3          10           13  \n",
              "4       0           1            1  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-5d13a9a5-b540-4795-a003-60d973568b25\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>instant</th>\n",
              "      <th>date</th>\n",
              "      <th>season</th>\n",
              "      <th>year</th>\n",
              "      <th>month</th>\n",
              "      <th>hour</th>\n",
              "      <th>holiday</th>\n",
              "      <th>day</th>\n",
              "      <th>workingday</th>\n",
              "      <th>weather_situation</th>\n",
              "      <th>temperature</th>\n",
              "      <th>atemp</th>\n",
              "      <th>humidity</th>\n",
              "      <th>wind_speed</th>\n",
              "      <th>casual</th>\n",
              "      <th>registered</th>\n",
              "      <th>count_total</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>2011-01-01</td>\n",
              "      <td>Spring</td>\n",
              "      <td>2011</td>\n",
              "      <td>Januari</td>\n",
              "      <td>0</td>\n",
              "      <td>Off Season</td>\n",
              "      <td>Sabtu</td>\n",
              "      <td>0</td>\n",
              "      <td>Clear</td>\n",
              "      <td>10</td>\n",
              "      <td>0.2879</td>\n",
              "      <td>81</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>13</td>\n",
              "      <td>16</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>2011-01-01</td>\n",
              "      <td>Spring</td>\n",
              "      <td>2011</td>\n",
              "      <td>Januari</td>\n",
              "      <td>1</td>\n",
              "      <td>Off Season</td>\n",
              "      <td>Sabtu</td>\n",
              "      <td>0</td>\n",
              "      <td>Clear</td>\n",
              "      <td>9</td>\n",
              "      <td>0.2727</td>\n",
              "      <td>80</td>\n",
              "      <td>0</td>\n",
              "      <td>8</td>\n",
              "      <td>32</td>\n",
              "      <td>40</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>2011-01-01</td>\n",
              "      <td>Spring</td>\n",
              "      <td>2011</td>\n",
              "      <td>Januari</td>\n",
              "      <td>2</td>\n",
              "      <td>Off Season</td>\n",
              "      <td>Sabtu</td>\n",
              "      <td>0</td>\n",
              "      <td>Clear</td>\n",
              "      <td>9</td>\n",
              "      <td>0.2727</td>\n",
              "      <td>80</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "      <td>27</td>\n",
              "      <td>32</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>2011-01-01</td>\n",
              "      <td>Spring</td>\n",
              "      <td>2011</td>\n",
              "      <td>Januari</td>\n",
              "      <td>3</td>\n",
              "      <td>Off Season</td>\n",
              "      <td>Sabtu</td>\n",
              "      <td>0</td>\n",
              "      <td>Clear</td>\n",
              "      <td>10</td>\n",
              "      <td>0.2879</td>\n",
              "      <td>75</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>10</td>\n",
              "      <td>13</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>2011-01-01</td>\n",
              "      <td>Spring</td>\n",
              "      <td>2011</td>\n",
              "      <td>Januari</td>\n",
              "      <td>4</td>\n",
              "      <td>Off Season</td>\n",
              "      <td>Sabtu</td>\n",
              "      <td>0</td>\n",
              "      <td>Clear</td>\n",
              "      <td>10</td>\n",
              "      <td>0.2879</td>\n",
              "      <td>75</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5d13a9a5-b540-4795-a003-60d973568b25')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-5d13a9a5-b540-4795-a003-60d973568b25 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-5d13a9a5-b540-4795-a003-60d973568b25');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-cfada8b9-d5ce-4088-a8ba-527112fd0d56\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-cfada8b9-d5ce-4088-a8ba-527112fd0d56')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-cfada8b9-d5ce-4088-a8ba-527112fd0d56 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "hour_df",
              "summary": "{\n  \"name\": \"hour_df\",\n  \"rows\": 17379,\n  \"fields\": [\n    {\n      \"column\": \"instant\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5017,\n        \"min\": 1,\n        \"max\": 17379,\n        \"num_unique_values\": 17379,\n        \"samples\": [\n          12831,\n          8689,\n          7092\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2011-01-01 00:00:00\",\n        \"max\": \"2012-12-31 00:00:00\",\n        \"num_unique_values\": 731,\n        \"samples\": [\n          \"2012-12-04 00:00:00\",\n          \"2011-02-03 00:00:00\",\n          \"2011-10-28 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"season\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Summer\",\n          \"Snow\",\n          \"Spring\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"year\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"2012\",\n          \"2011\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"month\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 12,\n        \"samples\": [\n          \"November\",\n          \"Oktober\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"hour\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6,\n        \"min\": 0,\n        \"max\": 23,\n        \"num_unique_values\": 24,\n        \"samples\": [\n          8,\n          16\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"holiday\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Holiday\",\n          \"Off Season\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"day\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"Sabtu\",\n          \"Minggu\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"workingday\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"weather_situation\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Cloudy\",\n          \"Heavy Rain Snow\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"temperature\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7,\n        \"min\": 1,\n        \"max\": 41,\n        \"num_unique_values\": 41,\n        \"samples\": [\n          22,\n          6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"atemp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.17185021563536587,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 65,\n        \"samples\": [\n          0.7879,\n          0.9242\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"humidity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 19,\n        \"min\": 0,\n        \"max\": 100,\n        \"num_unique_values\": 89,\n        \"samples\": [\n          29,\n          61\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"wind_speed\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8,\n        \"min\": 0,\n        \"max\": 57,\n        \"num_unique_values\": 30,\n        \"samples\": [\n          57,\n          33\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"casual\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 49,\n        \"min\": 0,\n        \"max\": 367,\n        \"num_unique_values\": 322,\n        \"samples\": [\n          201,\n          171\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"registered\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 151,\n        \"min\": 0,\n        \"max\": 886,\n        \"num_unique_values\": 776,\n        \"samples\": [\n          342,\n          744\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"count_total\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 181,\n        \"min\": 1,\n        \"max\": 977,\n        \"num_unique_values\": 869,\n        \"samples\": [\n          594,\n          46\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 63
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Insight:**\n",
        "1. Mengubah tipe data 'dteday' menjadi datetime\n",
        "2. Mengubah tipe data 'season', 'mnth', 'weekday', dan 'weathersit' menjadi category\n",
        "3. Mengubah value pada 'season', mnth', 'weathersit', 'day' , 'weekday', dan 'year' untuk mempermudah explatory data\n",
        "4. Mengembalikan nilai 'temp', 'atemp', 'hum', dan 'windspeed' ke nilai sebenarnya\n",
        "5. Menghapus kolom 'atemp' karena tidak diperlukan pada exploratory data\n",
        "6. Mengubah nama variabel untuk mempermudah pembacaan"
      ],
      "metadata": {
        "id": "Q_5ejIqckiSP"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gp-Y6wU38DC1"
      },
      "source": [
        "## Exploratory Data Analysis (EDA)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Pertanyaan 1: Bagaimana cuaca mempengaruhi jumlah peminjaman sepeda"
      ],
      "metadata": {
        "id": "HiKxEo3FiM1E"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Mengelompokkan data berdasarkan 'weather_situation'\n",
        "\n",
        "weather_rents = hour_df.groupby('weather_situation', observed=True)['count_total'].sum().reset_index()\n",
        "weather_rents_sorted = weather_rents.sort_values(by='count_total', ascending=False)\n",
        "weather_rents_sorted\n"
      ],
      "metadata": {
        "id": "qkC5LUajhaRN",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 175
        },
        "outputId": "ef6abe13-b738-4fb9-cd6b-3545b8b99a49"
      },
      "execution_count": 64,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  weather_situation  count_total\n",
              "0             Clear      2338173\n",
              "1            Cloudy       795952\n",
              "2   Light Rain Snow       158331\n",
              "3   Heavy Rain Snow          223"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d137e7b8-a48d-48d6-8cdf-70c456d7638a\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>weather_situation</th>\n",
              "      <th>count_total</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Clear</td>\n",
              "      <td>2338173</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Cloudy</td>\n",
              "      <td>795952</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Light Rain Snow</td>\n",
              "      <td>158331</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Heavy Rain Snow</td>\n",
              "      <td>223</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d137e7b8-a48d-48d6-8cdf-70c456d7638a')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d137e7b8-a48d-48d6-8cdf-70c456d7638a button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d137e7b8-a48d-48d6-8cdf-70c456d7638a');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-02f7df91-c2ae-4556-a033-e35b1b832990\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-02f7df91-c2ae-4556-a033-e35b1b832990')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-02f7df91-c2ae-4556-a033-e35b1b832990 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_88516c5b-88e0-47fb-8782-8f56dbfd8c38\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('weather_rents_sorted')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_88516c5b-88e0-47fb-8782-8f56dbfd8c38 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('weather_rents_sorted');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "weather_rents_sorted",
              "summary": "{\n  \"name\": \"weather_rents_sorted\",\n  \"rows\": 4,\n  \"fields\": [\n    {\n      \"column\": \"weather_situation\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Cloudy\",\n          \"Heavy Rain Snow\",\n          \"Clear\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"count_total\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1066962,\n        \"min\": 223,\n        \"max\": 2338173,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          795952,\n          223,\n          2338173\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 64
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Pertanyaan 2: Pada hari liburan, apakah ada kebiasaan yang berbeda dari kategori peminjam jika dibandingkan dengan hari biasa?"
      ],
      "metadata": {
        "id": "TkwStA7Om78T"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Memfilter data berdasarkan liburan\n",
        "holiday_data = hour_df[hour_df['holiday'] == \"Holiday\"]\n",
        "\n",
        "# Menjumlahkan pengguna 'registered' dan 'casual' selama liburan\n",
        "total_registered = holiday_data['registered'].mean().round().astype(int)\n",
        "total_casual = holiday_data['casual'].mean().round().astype(int)\n",
        "\n",
        "# Menjumlahkan pengguna 'registered' dan 'casual' selama tidak liburan\n",
        "no_holiday_data = hour_df[hour_df['holiday'] == \"Off Season\"]\n",
        "total_registered_no = no_holiday_data['registered'].mean().round().astype(int)\n",
        "total_casual_no = no_holiday_data['casual'].mean().round().astype(int)\n",
        "\n",
        "# Menampilkan hasil jumlah pengguna registered dan casual\n",
        "print(\"Rata-rata pengguna yang sudah mendaftar pada liburan:\", total_registered)\n",
        "print(\"Rata-rata pengguna yang sudah mendaftar pada hari biasa:\", total_registered_no)\n",
        "\n",
        "print(\"Rata-rata pengguna yang belum mendaftar pada liburan\", total_casual)\n",
        "print(\"Rata-rata pengguna yang belum mendaftar pada hari biasa\", total_casual_no)\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yGi5UOa4jCfM",
        "outputId": "0120b6ed-8a22-4a09-9823-5c0e88c991e9"
      },
      "execution_count": 65,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Rata-rata pengguna yang sudah mendaftar pada liburan: 112\n",
            "Rata-rata pengguna yang sudah mendaftar pada hari biasa: 155\n",
            "Rata-rata pengguna yang belum mendaftar pada liburan 45\n",
            "Rata-rata pengguna yang belum mendaftar pada hari biasa 35\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Pertanyaan 3: Pada sehari, pada pukul berapa sepeda paling banyak dipinjam?\n"
      ],
      "metadata": {
        "id": "QBvHZEOgotq8"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "time_rents = hour_df.groupby('hour', observed=True)['count_total'].mean().round().astype(int).reset_index()\n",
        "time_rents_sorted = time_rents.sort_values(by='count_total', ascending=False)\n",
        "time_rents_sorted\n",
        "\n",
        "highest_rentals = time_rents.loc[time_rents['count_total'].idxmax()]\n",
        "print(\"Sepeda lebih banyak dipinjam pada jam {}.00 dengan jumlah {} unit\".format(highest_rentals['hour'], highest_rentals['count_total']))\n"
      ],
      "metadata": {
        "id": "SEOElgKAnMOp",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "89ba1116-15cb-442a-b9e7-05e4e1c186f2"
      },
      "execution_count": 66,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Sepeda lebih banyak dipinjam pada jam 17.00 dengan jumlah 461 unit\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Pertanyaan 4: Dalam seminggu, hari apa sepeda paling banyak dipinjam?\n"
      ],
      "metadata": {
        "id": "NMH-Gbarpc8x"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Mengelompokkan data berdasarkan 'day'\n",
        "day_rents = hour_df.groupby('day', observed=True)['count_total'].mean().round().astype(int).reset_index()\n",
        "\n",
        "# Mengurutkan berdasarkan jumlah total penyewaan\n",
        "day_rents_sorted = day_rents.sort_values(by='count_total', ascending=False)\n",
        "\n",
        "# Mencari hari dengan persewaan tertinggi\n",
        "highest_rentals = day_rents.loc[day_rents['count_total'].idxmax()]\n",
        "\n",
        "# Menampilkan hasil hari dengan persewaan tertinggi\n",
        "print(\"Pada hari {} sepeda paling banyak dipinjam dengan rata-rata {} unit\".format(highest_rentals['day'], highest_rentals['count_total']))\n"
      ],
      "metadata": {
        "id": "9LYtfhMTpArx",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9157a7d9-73b0-4b31-ca16-5a46a1fc7479"
      },
      "execution_count": 67,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Pada hari Kamis sepeda paling banyak dipinjam dengan rata-rata 196 unit\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Pertanyaan 5: Bagaimana jumlah sepeda yang di pinjam ketika udara sedang sangat panas atau sangat dingin?"
      ],
      "metadata": {
        "id": "ugurHmihpwtc"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Menghitung korelasi antara temperatur dan total_count\n",
        "correlation = hour_df['temperature'].corr(hour_df['count_total'])\n",
        "print(\"Korelasi antara temperatur dan total penyewaan:\", correlation)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WVvfaHY2p37M",
        "outputId": "37be12ec-f12c-4133-899e-cc82ee367329"
      },
      "execution_count": 68,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Korelasi antara temperatur dan total penyewaan: 0.4045027693376205\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Insight:**\n",
        "- Pertanyaan 1: Kondisi cuaca berpengaruh terhadap jumlah peminjaman sepeda, di mana penyewaan sepeda cenderung lebih banyak pada cuaca yang cerah.\n",
        "- Pertanyaan 2: Pengguna kategori casual (belum terdaftar) cenderung lebih tinggi saat liburan dibandingkan hari biasa, sementara kategori registered (telah terdaftar) memiliki perbedaan lebih kecil.\n",
        "- Pertanyaan 3: Puncak penyewaan sepeda terjadi pada pukul 17.00, waktu sepulang kerja, dan jam 8.00 pagi, waktu berangkat kerja.\n",
        "- Pertanyaan 4: Hari Sabtu memiliki tingkat penyewaan sepeda tertinggi dalam seminggu.\n",
        "- Pertanyaan 5: Jumlah penyewaan sepeda lebih rendah ketika suhu berada di rentang terdingin (0-10°C) dan tertinggi saat suhu sedang (21-30°C).\n"
      ],
      "metadata": {
        "id": "th_Lzl2Fkj9O"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zsyZjqak8DC2"
      },
      "source": [
        "## Visualization & Explanatory Analysis"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Pertanyaan 1: Bagaimana cuaca mempengaruhi jumlah peminjaman sepeda"
      ],
      "metadata": {
        "id": "udV7DIhmQIIK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Visualisasi rata-rata penyewaan sepeda berdasarkan kondisi cuaca\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.barplot(x='weather_situation', y='count_total', data=hour_df, legend=False)\n",
        "plt.title('Rata-rata Penyewaan Sepeda Berdasarkan Kondisi Cuaca')\n",
        "plt.xlabel('Kondisi Cuaca')\n",
        "plt.ylabel('Rata-rata Penyewaan Sepeda')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 432
        },
        "id": "nf4xGTNaQKWw",
        "outputId": "0c641951-f00f-4d02-8e38-19834c2a9b02"
      },
      "execution_count": 69,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "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796tBQsW6NChQ2rZsmWytiNGjNC5c+fsj759+97zNgEAAADA3Vg+IxUVFaXBgwdrzpw5unLlSrLlCQkJae6rWbNmatasWYrLvL29tWrVKod5//3vf/X4448rPDxchQsXts/39PSUv79/mp8XAAAAAO6H5TNSb775pn755RdNnDhRrq6umjx5soYPH64CBQpo+vTpGVGjXUREhGw2m3LlyuUwf/To0cqTJ4+qVKmijz/+WPHx8an2ExMTc19n0gAAAAA82iyfkVqyZImmT5+u4OBgde/eXfXq1VOJEiUUGBioGTNmqFOnThlRp27duqXBgwerY8eO8vLyss/v16+fqlatKh8fH23ZskVDhgzRuXPnNG7cuDv2NWrUKA0fPjxD6gQAAADw72c5SF29elXFihWTJHl5edmHO69bt65eeeWV9K3u/4uLi1P79u1ljNHEiRMdlg0cOND+c6VKleTi4qJevXpp1KhRcnV1TbG/IUOGOKwXGRmpgICADKkdAAAAwL+P5Uv7ihUrpuPHj0uSypQpozlz5kj6+0zVPy+5Sw9JIerkyZNatWqVw9molNSoUUPx8fGpfmGwq6urvLy8HB4AAAAAkFaWg1T37t21d+9eSdJbb72lCRMmyM3NTQMGDNCgQYPStbikEHX48GGtXr1aefLkues6YWFhcnJykp+fX7rWAgAAAABJLF/aN2DAAPvPjRs31sGDB7Vr1y6VKFFClSpVstTXzZs3deTIEfv08ePHFRYWJh8fH+XPn1/PPvusdu/eraVLlyohIUHnz5+XJPn4+MjFxUVbt27V9u3b1bBhQ3l6emrr1q0aMGCAOnfurNy5c1vdNAAAAABIE8tB6p8CAwMVGBh4T+vu3LlTDRs2tE8n3bcUGhqq9957T4sXL5YkVa5c2WG9tWvXKjg4WK6urpo1a5bee+89xcTEqGjRohowYIDD/U8AAADAw8AYo6ioKPu0h4eHbDZbJlaE1NxTkIqKitL69esVHh6u2NhYh2X9+vVLcz/BwcEyxtxxeWrLJKlq1aratm1bmp8PAAAAyKqioqLUqlUr+/SPP/6onDlzZmJFSI3lILVnzx41b95c0dHRioqKko+Pjy5fvix3d3f5+flZClIAAAAA8DCyPNjEgAED1KJFC127dk05cuTQtm3bdPLkSVWrVk2ffPJJRtQIAAAAAFmK5SAVFham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KVWqlAkNDTWzZ882CQkJ9jahoaEmMDDQxMfH2+e1a9fOfqb1zz//NJLM5s2b7csvX75scuTIYebMmWOMMebzzz835cuXN8YYs2jRIlOjRg3TqlUr++vYuHFj8/bbb6e6/VkdZ6Rw34wxltfZu3evjhw5Ik9PT+XMmVM5c+aUj4+Pbt26paNHj0qSLly4oB49eqhkyZLy9vaWl5eXbt68qfDwcIe+qlevni7bAaTFvezvBw4cUFBQkMMZrDp16igxMdH+qXda+siWLZuqVatmn1emTJlkZ8BeeuklTZkyRdLfx9DPP//MmdpH3KFDh1SpUiW5ubnZ5z3++OMptq1UqZL95/z580uSw1nPtCpdurTCwsK0Y8cODR48WCEhIerbt69DmwkTJqhatWry9fVVzpw5NWnSpGTv76nVl1RjavXVr19fx44d05o1a/Tss8/q999/V7169TRy5Mg79muz2eTv72/vNy3Hb4MGDeyfvK9fv15PPPGE/dP4HTt2KC4uTnXq1El123B3DRs2VFhYmMNj8uTJDm327t2rqVOn2v+3yJkzp0JCQpSYmKjjx49Lknbt2qUWLVqocOHC8vT0VIMGDSTJvv9VrlxZZcuWtZ+VWr9+vS5evKh27drZn+de32s3btyoXbt2aerUqSpVqpS++uorh+WrV69Wo0aNVLBgQXl6eqpLly66cuWKoqOj79hnkSJF5OnpaZ++23GRP39+bd26Vfv27dNrr72m+Ph4hYaGqmnTpkpMTLS3K1++vJydnVPsN+lvUo0aNezL8+TJo9KlS+vAgQOS/j4u/vjjD126dMl+VjY4OFjr1q1TXFyctmzZ8tCfqSVI4b6VLFlSNpvN0g32N2/eVLVq1ZK9If755596/vnnJUmhoaEKCwvTZ599pi1btigsLEx58uSxX/qXJKXLq4CMci/7e1o4OTklC2lxcXGW++natauOHTumrVu36vvvv1fRokVVr1699CoT/3K3D9Zjs9kkyeEfq7RycXFRiRIlVKFCBY0ePVrOzs4aPny4ffmsWbP0xhtv6MUXX9TKlSsVFham7t27J3t/T62+pBrvVl/27NlVr149DR48WCtXrtSIESM0cuRIh+e6l35vFxwcrD/++EOHDx/WH3/8obp169r/YVy/fr2qV6/+cF++lEV4eHioRIkSDo+CBQs6tLl586Z69erl8L/F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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Pertanyaan 2: Pada hari liburan, apakah ada kebiasaan yang berbeda dari kategori peminjam jika dibandingkan dengan hari biasa?"
      ],
      "metadata": {
        "id": "wwNvO_w4QIIL"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Visualisasi jenis pengguna pada hari libur dan hari biasa\n",
        "categories = ['Liburan', 'Hari Biasa']\n",
        "registered_values = [total_registered, total_registered_no]\n",
        "casual_values = [total_casual, total_casual_no]\n",
        "\n",
        "# Design\n",
        "x = np.arange(len(categories))\n",
        "width = 0.35\n",
        "fig, ax = plt.subplots(figsize=(10, 6))\n",
        "ax.bar(x - width/2, registered_values, width, label='Pengguna Terdaftar')\n",
        "ax.bar(x + width/2, casual_values, width, label='Pengguna Baru')\n",
        "ax.set_xlabel('Kondisi (Liburan vs Hari Biasa)')\n",
        "ax.set_ylabel('Rata-rata Pengguna')\n",
        "ax.set_title('Rata-rata Pengguna Registered dan Casual Selama Liburan vs Hari Biasa')\n",
        "ax.set_xticks(x)\n",
        "ax.set_xticklabels(categories)\n",
        "ax.legend()\n",
        "\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 432
        },
        "id": "6fzFRNGGQNzx",
        "outputId": "dedd580b-bc2e-4934-a2a5-a77224198557"
      },
      "execution_count": 70,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Pertanyaan 3: Pada sehari, pada pukul berapa sepeda paling banyak dipinjam?\n"
      ],
      "metadata": {
        "id": "tAxBiLMhQIIL"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Visualisasi penyewaan sepeda berdasarkan jam\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.lineplot(x='hour', y='count_total', data=time_rents, marker=\"o\")\n",
        "plt.title('Total Penyewaan Sepeda Berdasarkan Jam')\n",
        "plt.xlabel('Jam')\n",
        "plt.ylabel('Jumlah Penyewaan Sepeda')\n",
        "plt.xticks(rotation=45)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 438
        },
        "id": "NqID5zepQPfl",
        "outputId": "516add5d-a7c1-4f2e-efe9-3e1ccfa2ae96"
      },
      "execution_count": 71,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Pertanyaan 4: Dalam seminggu, hari apa sepeda paling banyak dipinjam?\n"
      ],
      "metadata": {
        "id": "BJ3ILlXSQIIL"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Visualisasi penyewaan sepeda berdasarkan hari\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.barplot(x='day', y='count_total', data=day_rents)\n",
        "plt.title('Total Penyewaan Sepeda Berdasarkan Hari')\n",
        "plt.xlabel('Hari')\n",
        "plt.ylabel('Jumlah Penyewaan Sepeda')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 432
        },
        "id": "sVL_w7FRQRs9",
        "outputId": "1c470087-dbcf-477d-a8fc-808a225dbb84"
      },
      "execution_count": 72,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Analisis Lanjutan"
      ],
      "metadata": {
        "id": "9y4VUsmcYNZ5"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Menjawab pertanyaan 5 dengan proses binning"
      ],
      "metadata": {
        "id": "l1-lekuNQaj5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Binning\n",
        "bins = [0, 10, 20, 30, 40]\n",
        "labels = ['0-10°C', '11-20°C', '21-30°C', '31-40°C']\n",
        "hour_df['temp_category'] = pd.cut(hour_df['temperature'], bins=bins, labels=labels, include_lowest=True)\n",
        "\n",
        "temp_rentals = hour_df.groupby('temp_category')['count_total'].mean().round().astype(int).reset_index()\n",
        "print(temp_rentals)\n"
      ],
      "metadata": {
        "id": "iWhnzsJGYUCO",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2f5f74b3-204c-4d86-af20-aa0e223de936"
      },
      "execution_count": 73,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "  temp_category  count_total\n",
            "0        0-10°C           70\n",
            "1       11-20°C          148\n",
            "2       21-30°C          232\n",
            "3       31-40°C          333\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-73-56c51521c5e6>:6: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n",
            "  temp_rentals = hour_df.groupby('temp_category')['count_total'].mean().round().astype(int).reset_index()\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Visualisasi\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.bar(temp_rentals['temp_category'], temp_rentals['count_total'])\n",
        "plt.title('Rata-rata Penyewaan Sepeda Berdasarkan Kategori Temperatur')\n",
        "plt.xlabel('Kategori Temperatur')\n",
        "plt.ylabel('Rata-rata Penyewaan Sepeda')\n",
        "plt.xticks(rotation=45)\n",
        "\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 459
        },
        "id": "GKwbpXGxQ9Nn",
        "outputId": "f81d0f47-6444-4815-8746-674c8d61e553"
      },
      "execution_count": 74,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_WeHlCeX8DC2"
      },
      "source": [
        "## Conclusion"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ZTcyR48Y8DC2"
      },
      "source": [
        "- Cuaca: Jumlah peminjaman sepeda lebih tinggi pada cuaca cerah dan menurun pada cuaca buruk seperti hujan atau salju.\n",
        "- Kategori Peminjam pada Liburan: Pengguna casual meningkat saat liburan, yang menunjukkan bahwa orang-orang cenderung lebih banyak menggunakan sepeda saat waktu libur tanpa harus mendaftar.\n",
        "- Waktu Peminjaman: Jam sibuk penyewaan sepeda adalah pada pagi dan sore hari, yang sesuai dengan waktu orang berangkat dan pulang kerja.\n",
        "- Hari dengan Peminjaman Terbanyak: Hari Sabtu memiliki tingkat penyewaan tertinggi, menunjukkan bahwa akhir pekan merupakan waktu yang populer untuk penyewaan.\n",
        "- Pengaruh Suhu: Temperatur sedang mendorong tingkat penyewaan tertinggi, sementara suhu yang sangat panas atau dingin cenderung menurunkan minat orang untuk menyewa sepeda.\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "name": "python",
      "version": "3.8.0 (tags/v3.8.0:fa919fd, Oct 14 2019, 19:21:23) [MSC v.1916 32 bit (Intel)]"
    },
    "orig_nbformat": 4,
    "vscode": {
      "interpreter": {
        "hash": "972b3bf27e332e87b5379f2791f6ef9dfc79c71018c370b0d7423235e20fe4d7"
      }
    },
    "colab": {
      "provenance": [],
      "include_colab_link": true
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
